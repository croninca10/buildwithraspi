#The previous class we had successfully install PiVPN but we were not able to get it to run or add clients to the server.
#We soon realized that our problem was that we needed to have control over the router in terms port fowarding.
#We switched resources and focused on starting agian using a source Raj provided.
http://makezine.com/projects/browse-anonymously-with-a-diy-raspberry-pi-vpntor-router/

Before proceeding further, update apt-get. $ sudo apt-get update An access point allows a computer to connect to a network over WiFi. On our Pi we will be using hostapd to create the access point and isc-dhcp-server to give IP addresses to computers that connect to our access point.
Install access point: You will need a custom version of hostapd, the access point software that supports the Edimax cards you have. Installing hostapd takes about 10 minutes. $ wget https://github.com/jenssegers/RTL8188-hostapd/archive/v1.1.tar.gz $ tar -zxvf v1.1.tar.gz $ cd RTL8188-hostapd-1.1/hostapd $ make $ sudo make install Tell hostapd the name and password of our access point and the name of the device we are using to host WiFi connections: $ sudo nano –w /etc/hostapd/hostapd.conf Change three lines in /etc/hostapd/hostapd.conf to: interface=wlan1 ssid=mySecureRouter wpa_passphrase=mySecurePassword Finally, start hostapd and add it as a service on boot: $ sudo service hostapd start $ sudo update-rc.d hostapd enable
Install DHCP server Install dnsmasq: $ sudo apt-get install dnsmasq We will tell our DHCP server that it controls an IP address range between 192.168.0.10 and 192.168.0.200, with our Pi router having the IP of 192.168.0.1. It will be configured as an “authoritative” server acting on the wlan1 device, meaning that it will force clients to discard expired IP addresses. $ sudo nano –w /etc/dnsmasq.d/dnsmasq.custom.conf Add the following to /etc/dnsmasq.d/dnsmasq.custom.conf: interface=wlan1 dhcp-range=wlan1,192.168.10.10,192.168.10.200,2h dhcp-option=3,192.168.10.1 # our router dhcp-option=6,192.168.10.1 # our DNS Server dhcp-authoritative # force clients to grab a new IP Configure the DHCP server to use wlan1 as the device that manages DHCP requests: $ sudo nano -w /etc/resolv.conf In the file /etc/resolv.conf, add the following this line, pointing DNS to the Google public DNS servers: nameserver 192.168.1.1 nameserver 8.8.8.8 nameserver 8.8.8.4 Now configure the wlan1 device to load at boot with a static IP address of 192.168.0.1.$ sudo –w nano /etc/network/interfaces Add the following lines for wlan1: iface wlan1 inet static address 192.168.0.1 netmask 255.255.255.0 Finally, restart the wlan1 WiFi adapter: $ sudo ifdown wlan1 $ sudo ifup wlan1 Now start the DHCP server and add it as a service at boot: $ sudo service dnsmasq start $ sudo update-rc.d dnsmasq enable You should now be able to see “mySecureRouter” as a WiFi access point from your computer. You can connect to it with WPA2 encryption and the password “mySecurePassword.”
